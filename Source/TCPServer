
import java.awt.List;
import java.io.*;
import java.lang.reflect.Array;
import java.net.ServerSocket;
import java.net.Socket;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.security.InvalidAlgorithmParameterException;
import java.security.InvalidKeyException;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.security.NoSuchProviderException;
import java.security.spec.InvalidParameterSpecException;
import java.util.Arrays;

import javax.crypto.BadPaddingException;
import javax.crypto.IllegalBlockSizeException;
import javax.crypto.KeyGenerator;
import javax.crypto.NoSuchPaddingException;
import javax.crypto.SecretKey;
import javax.crypto.spec.SecretKeySpec;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.Cipher;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.SecretKeySpec;

import org.apache.commons.codec.binary.Base64;

public class TCPServer 

{
	private static ArrayList<ServerThread> threadList = new ArrayList<ServerThread>();
	public static int counter = 0;
	private static byte[] sharedBytes;
	private static boolean bitsEntered = false;

	//Socket multiSocket;

	public TCPServer(Socket socket)
	{
		
	}
	
	public static void AddToCounter(int i){
		counter += i;
	}
	

	public static void main(String[] args) throws IOException, InvalidKeyException,
		IllegalBlockSizeException, BadPaddingException, InvalidAlgorithmParameterException,
			NoSuchAlgorithmException, NoSuchPaddingException, InterruptedException, NoSuchProviderException
	{
		final ServerSocket serverSocket = new ServerSocket(6874);
		final TheGUIServer theGui = new TheGUIServer();
	
		theGui.setChatDisplay("Waiting for clients......");
		boolean acceptMore = true;
		
		while(acceptMore)
		{
			//Establish Connection with client to server socket
			//Then create a new server thread for this connection (I/O is in there)
			Socket client = serverSocket.accept();
			theGui.setChatDisplay("Client Connected: " + client.getInetAddress() + "\n");
			System.out.println(counter);
			
			ServerThread srvThread = new ServerThread(client);
			srvThread.start();
		}
	}
	
	protected static void isSharedBitsSet(boolean isIt)
	{
		bitsEntered = isIt;
	}
}

