import java.io.BufferedReader;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.math.BigInteger;
import java.net.Socket;
import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;
import java.security.NoSuchProviderException;
import java.security.PublicKey;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Enumeration;
import java.util.Vector;

import javax.crypto.BadPaddingException;
import javax.crypto.Cipher;
import javax.crypto.IllegalBlockSizeException;
import javax.crypto.NoSuchPaddingException;


public class ServerThread extends Thread
{
	protected BufferedReader inFromClient;
	protected DataOutputStream outToClient;
	protected static Socket threadSock;
	protected Thread listener;
	
	private boolean suspendAll;
	
	private String sharedBitString;
	private static boolean bitsEntered = false;
	private TheGUISrvThread theGui;
	private BigInteger n;
	private BigInteger e;
	
	public ServerThread(Socket socket, String shared) throws IOException
	{
		sharedBitString = shared;
		threadSock = socket;
		TCPServer.AddToCounter(1);
		suspendAll = true;
	}
	
	public void start()
	{
		try {
				inFromClient = new BufferedReader(new InputStreamReader(threadSock.getInputStream()));
				outToClient = (new DataOutputStream(threadSock.getOutputStream()));
		    }catch (IOException e) {
			e.printStackTrace();}
		
		listener = new Thread(this);
		listener.start();
	}
	

	protected static Vector<ServerThread> serverThreadList = new Vector<ServerThread>();
	public void run() 
	{
		try {
			publicKeySwap();} catch (IOException e) {
			e.printStackTrace();
		} catch (InterruptedException e) {
				e.printStackTrace();
			}
		
		System.out.println("we are in run()");
		serverThreadList.addElement(this);
		while(true)
		{
			try {
				sendToAll(inFromClient.readLine());
			} catch (IOException e1) {
				e1.printStackTrace();
			}
		}
	}

	
	protected void sendToAll(String encryptedString)
	{
		if(!suspendAll)
		{
			synchronized(serverThreadList)
			{
				Enumeration<ServerThread> enumerator = serverThreadList.elements();
				while(enumerator.hasMoreElements())
				{
					ServerThread srvThread = (ServerThread)enumerator.nextElement();
					try{
						TCPServer.getGUI().getChatDisplay().append(encryptedString + "\n");
						srvThread.outToClient.writeBytes(encryptedString + '\n');
					   }catch (IOException e1) {
						e1.printStackTrace();
					}
				}
			}	
		}
	}
	
	
	synchronized private void publicKeySwap() throws IOException, InterruptedException
	{
		//===================================
		//		    Receive RSAe
		//===================================
		boolean rsaeIsSent = false;
		String temp = null;		
		outToClient.writeBytes("1"+"\n");
		System.out.println("Wrote bit 1 to client" + "\n");

		while(!rsaeIsSent)
		{
			temp = inFromClient.readLine();
			System.out.println("This is temp: " + temp + "\n");
			outToClient.flush();
			
			if(temp != null)
			{
				e = new BigInteger(temp);
				
				System.out.println("This is E: " + e + "\n");
				rsaeIsSent = true;
			}
		}
		outToClient.writeBytes("0"+"\n");
		System.out.println("Wrote bit 0 to client" + "\n");

		
		//===================================
		//		    Receive RSAn
		//===================================
		boolean rsanIsSent = false;
		temp = null;
		
		outToClient.writeBytes("1"+"\n");
		System.out.println("Wrote bit 1 to client" + "\n");
		while(!rsanIsSent)
		{
			temp = inFromClient.readLine();
			System.out.println("This is temp: " + temp + "\n");
			outToClient.flush();
			
			if(temp != null)
			{
				n = new BigInteger(temp);
				
				System.out.println("This is N: " + n + "\n");
				rsanIsSent = true;
			}
		}
		
		outToClient.flush();
		outToClient.writeBytes("0"+"\n");
		System.out.println("Wrote bit 0 to client" + "\n");
		outToClient.flush();
		
		//==============================
		//		Create and encrypt
		//==============================
		RSA rsa = new RSA(n, e);
		
		String encryptedSharedBytes = rsa.encrypt(sharedBitString);
		outToClient.writeBytes(encryptedSharedBytes + "\n");
		suspendAll = false;
		System.out.println("Sent Encrypted private secret to client");
		System.out.println("SUSPEND ALL??: "+suspendAll);
	}
						
	public DataOutputStream getOutToClient() {
		return outToClient;
	}
	
	protected void setSharedBits(boolean bits)
	{
		bitsEntered = bits;
	}
}
